<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandNotFound" xml:space="preserve">
    <value>The specified command "{0}" does not exist or incorrect arguments.</value>
  </data>
  <data name="ManualTitle" xml:space="preserve">
    <value>Yencon Command-Line Manual</value>
  </data>
  <data name="Man_Exit" xml:space="preserve">
    <value>Terminates this command line tool.</value>
  </data>
  <data name="Man_Help" xml:space="preserve">
    <value>Show this command line manual.</value>
  </data>
  <data name="Man_Quit" xml:space="preserve">
    <value>An alias for the "exit" command.</value>
  </data>
  <data name="Ver_Copyright" xml:space="preserve">
    <value>Copyright</value>
  </data>
  <data name="Ver_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Ver_Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="Man_About" xml:space="preserve">
    <value>Show the copyright and the version information of this command line tool.</value>
  </data>
  <data name="Man_Ver" xml:space="preserve">
    <value>An alias for the "about" command.</value>
  </data>
  <data name="FileNotOpened" xml:space="preserve">
    <value>A file did not load yet now. Please type "help" to check all commands.</value>
  </data>
  <data name="ManualNotFound" xml:space="preserve">
    <value>"{0}" has no specific information.</value>
  </data>
  <data name="Man_Help_Full" xml:space="preserve">
    <value>Show this command line manual. Show additional information of a command when you put its command name in argument.</value>
  </data>
  <data name="Man_Loadb" xml:space="preserve">
    <value>Reads a binary file with the specified name in an argument.</value>
  </data>
  <data name="Man_Loadb_Full" xml:space="preserve">
    <value>Reads a binary file with the specified name in an argument. The file name needs a Yencon-format escaped string. If the file already loaded, then all changes will discard. When you did not specify the file name, the tool will reload the currently loaded file.</value>
  </data>
  <data name="Man_Saveb" xml:space="preserve">
    <value>Writes changes into a binary file with the specified name in an argument.</value>
  </data>
  <data name="Man_Saveb_Full" xml:space="preserve">
    <value>Writes changes into a binary file with the specified name in an argument. The file name needs a Yencon-format escaped string. If the file already exists, then it will be overwritten. When you did not specify the file name, changes will save into the currently loaded file.</value>
  </data>
  <data name="Fname_Untitled" xml:space="preserve">
    <value>Untitled.ycn</value>
  </data>
  <data name="ToolTitle" xml:space="preserve">
    <value>Yencon Command-Line Tool</value>
  </data>
  <data name="Man_Binhdr" xml:space="preserve">
    <value>Show the header information of the binary format.</value>
  </data>
  <data name="SectionNotFound" xml:space="preserve">
    <value>The section with the specified name does not found.</value>
  </data>
  <data name="Man_Goroot" xml:space="preserve">
    <value>Return back the operation target to the root section.</value>
  </data>
  <data name="Man_Into" xml:space="preserve">
    <value>Open the section with the specified name in an argument.</value>
  </data>
  <data name="Man_List" xml:space="preserve">
    <value>Show all the subkeys in the current section.</value>
  </data>
  <data name="ShowBinHeader_Compatibility" xml:space="preserve">
    <value>Compatibility</value>
  </data>
  <data name="ShowBinHeader_Implementation" xml:space="preserve">
    <value>Implementation</value>
  </data>
  <data name="ShowBinHeader_KeyNameSize" xml:space="preserve">
    <value>KeyNameSize</value>
  </data>
  <data name="ShowBinHeader_KeyNameType" xml:space="preserve">
    <value>KeyNameType</value>
  </data>
  <data name="ShowBinHeader_Revision" xml:space="preserve">
    <value>Revision</value>
  </data>
  <data name="ShowBinHeader_Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="Man_Loadt" xml:space="preserve">
    <value>Reads a text file with the specified name in an argument.</value>
  </data>
  <data name="Man_Loadt_Full" xml:space="preserve">
    <value>Reads a text file with the specified name in an argument. The file name needs a Yencon-format escaped string. If the file already loaded, then all changes will discard. When you did not specify the file name, the tool will reload the currently loaded file.</value>
  </data>
  <data name="Man_Savet" xml:space="preserve">
    <value>Writes changes into a text file with the specified name in an argument.</value>
  </data>
  <data name="Man_Savet_Full" xml:space="preserve">
    <value>Writes changes into a text file with the specified name in an argument. The file name needs a Yencon-format escaped string. If the file already exists, then it will be overwritten. When you did not specify the file name, changes will save into the currently loaded file.</value>
  </data>
  <data name="Man_Adds" xml:space="preserve">
    <value>Adds a new section with the specified name.</value>
  </data>
  <data name="Man_Set" xml:space="preserve">
    <value>Sets a value to the key with the specified name. When it does not exist yet, it will newly be added.</value>
  </data>
  <data name="Man_Set_Full" xml:space="preserve">
    <value>Sets a value to the key with the specified name. When it does not exist yet, it will newly be added.
Arguments are written ordered "set", "type", "name", and "value".
Types: "str" is a string, "num" is an integer, "flg" is a boolean, and "nul" is a null-value.</value>
  </data>
</root>